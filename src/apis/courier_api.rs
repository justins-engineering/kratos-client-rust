/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.
 *
 * The version of the OpenAPI document: v1.3.8
 * Contact: office@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::{apis::ResponseContent, models};
use serde::{Deserialize, Serialize};

#[cfg(feature = "wasm")]
use super::{AddQuery, Error, configuration};

#[cfg(feature = "reqwest")]
use super::{Error, configuration};
#[cfg(any(not(target_family = "wasm"), feature = "reqwest"))]
use reqwest;

#[cfg(all(target_family = "wasm", feature = "wasm"))]
use gloo_utils::format::JsValueSerdeExt;
#[cfg(all(target_family = "wasm", feature = "wasm"))]
use wasm_bindgen::prelude::*;
#[cfg(all(target_family = "wasm", feature = "wasm"))]
use wasm_bindgen_futures::JsFuture;
#[cfg(all(target_family = "wasm", feature = "wasm"))]
use web_sys::{Request, RequestCredentials, RequestInit, RequestMode, Response};

/// struct for typed errors of method [`get_courier_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCourierMessageError {
    Status400(models::ErrorGeneric),
    DefaultResponse(models::ErrorGeneric),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_courier_messages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCourierMessagesError {
    Status400(models::ErrorGeneric),
    DefaultResponse(models::ErrorGeneric),
    UnknownValue(serde_json::Value),
}

/// Gets a specific messages by the given ID.
#[cfg(any(not(target_family = "wasm"), feature = "reqwest"))]
pub async fn get_courier_message(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<models::Message, Error<GetCourierMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/admin/courier/messages/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCourierMessageError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[cfg(all(target_family = "wasm", feature = "wasm"))]
pub async fn get_courier_message(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<models::Message, Error<GetCourierMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = RequestInit::new();
    local_var_client.set_method("GET");
    local_var_client.set_mode(RequestMode::Cors);
    local_var_client.set_credentials(RequestCredentials::Include);

    let id = crate::apis::urlencode(id);

    let possible_uri_len =
        "/admin/courier/messages/".len() + local_var_configuration.base_path.len() + id.len();

    let mut local_var_uri_str = String::with_capacity(possible_uri_len);

    local_var_uri_str.push_str(&local_var_configuration.base_path);
    local_var_uri_str.push_str("/admin/courier/messages/");
    local_var_uri_str.push_str(&id);

    let local_var_req_builder =
        Request::new_with_str_and_init(&local_var_uri_str, &local_var_client)?;

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder
            .headers()
            .set("USER_AGENT", local_var_user_agent)?;
    }

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder
            .headers()
            .set("Authorization", &local_var_value)?;
    };

    local_var_req_builder
        .headers()
        .set("Accept", "application/json")?;

    let local_var_req = JsFuture::from(
        web_sys::window()
            .unwrap()
            .fetch_with_request(&local_var_req_builder),
    )
    .await?;

    assert!(local_var_req.is_instance_of::<Response>());
    let local_var_resp: Response = local_var_req.dyn_into().unwrap();

    let local_var_status = local_var_resp.status();
    let local_var_content = JsFuture::from(local_var_resp.json()?).await?;

    if !(400..600).contains(&local_var_status) {
        local_var_content.into_serde().map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCourierMessageError> = local_var_content.into_serde().ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: if local_var_content.is_undefined() {
                String::from("null")
            } else {
                web_sys::js_sys::JSON::stringify(&local_var_content)
                    .map(String::from)
                    .unwrap_throw()
            },
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists all messages by given status and recipient.
#[cfg(any(not(target_family = "wasm"), feature = "reqwest"))]
pub async fn list_courier_messages(
    configuration: &configuration::Configuration,
    page_size: Option<i64>,
    page_token: Option<&str>,
    status: Option<models::CourierMessageStatus>,
    recipient: Option<&str>,
) -> Result<Vec<models::Message>, Error<ListCourierMessagesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/admin/courier/messages",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder =
            local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = recipient {
        local_var_req_builder =
            local_var_req_builder.query(&[("recipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCourierMessagesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[cfg(all(target_family = "wasm", feature = "wasm"))]
pub async fn list_courier_messages(
    configuration: &configuration::Configuration,
    page_size: Option<i64>,
    page_token: Option<&str>,
    status: Option<models::CourierMessageStatus>,
    recipient: Option<&str>,
) -> Result<Vec<models::Message>, Error<ListCourierMessagesError>> {
    let local_var_configuration = configuration;

    let local_var_client = RequestInit::new();
    local_var_client.set_method("GET");
    local_var_client.set_mode(RequestMode::Cors);
    local_var_client.set_credentials(RequestCredentials::Include);

    let possible_uri_len = "/admin/courier/messages".len()
        + local_var_configuration.base_path.len()
        + "page_size".len()
        + i64::MAX.to_string().len()
        + "page_token".len()
        + "status".len()
        + "recipient".len()
        + 9;
    let mut local_var_uri_str = String::with_capacity(possible_uri_len);

    local_var_uri_str.push_str(&local_var_configuration.base_path);
    local_var_uri_str.push_str("/admin/courier/messages");

    let mut is_first_query: bool = true;

    if let Some(ref local_var_str) = page_size {
        local_var_uri_str.add_query(
            &mut is_first_query,
            "page_size=",
            &local_var_str.to_string(),
        );
    }
    if let Some(ref local_var_str) = page_token {
        local_var_uri_str.add_query(&mut is_first_query, "page_token=", &local_var_str);
    };
    if let Some(ref local_var_str) = status {
        local_var_uri_str.add_query(&mut is_first_query, "status=", &local_var_str.to_string());
    }
    if let Some(ref local_var_str) = recipient {
        local_var_uri_str.add_query(&mut is_first_query, "recipient=", &local_var_str);
    }
    let local_var_req_builder =
        Request::new_with_str_and_init(&local_var_uri_str, &local_var_client)?;

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder
            .headers()
            .set("USER_AGENT", local_var_user_agent)?;
    }

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder
            .headers()
            .set("Authorization", &local_var_value)?;
    };

    local_var_req_builder
        .headers()
        .set("Accept", "application/json")?;

    let local_var_req = JsFuture::from(
        web_sys::window()
            .unwrap()
            .fetch_with_request(&local_var_req_builder),
    )
    .await?;

    assert!(local_var_req.is_instance_of::<Response>());
    let local_var_resp: Response = local_var_req.dyn_into().unwrap();

    let local_var_status = local_var_resp.status();
    let local_var_content = JsFuture::from(local_var_resp.json()?).await?;

    if !(400..600).contains(&local_var_status) {
        local_var_content.into_serde().map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCourierMessagesError> =
            local_var_content.into_serde().ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: if local_var_content.is_undefined() {
                String::from("null")
            } else {
                web_sys::js_sys::JSON::stringify(&local_var_content)
                    .map(String::from)
                    .unwrap_throw()
            },
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
